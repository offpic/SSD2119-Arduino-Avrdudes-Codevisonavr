/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 24.03.2022
Author  : 
Company : 
Comments: 


Chip type               : ATmega328P
Program type            : Application
AVR Core Clock frequency: 8,000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega328p.h>

// Graphic Display functions
#include <glcd.h>

// Font used for displaying text
// on the graphic display
#include <font5x7.h>

// Declare your global variables here

void main(void)
{
// Declare your local variables here
// Variable used to store graphic display
// controller initialization data
GLCDINIT_t glcd_init_data;

// Crystal Oscillator division factor: 1
#pragma optsize-
CLKPR=(1<<CLKPCE);
CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
#ifdef _OPTIMIZE_SIZE_
#pragma optsize+
#endif

// Input/Output Ports initialization
// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0A output: Disconnected
// OC0B output: Disconnected
TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0A=0x00;
OCR0B=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2A output: Disconnected
// OC2B output: Disconnected
ASSR=(0<<EXCLK) | (0<<AS2);
TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2A=0x00;
OCR2B=0x00;

// Timer/Counter 0 Interrupt(s) initialization
TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);

// Timer/Counter 1 Interrupt(s) initialization
TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);

// Timer/Counter 2 Interrupt(s) initialization
TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// Interrupt on any change on pins PCINT0-7: Off
// Interrupt on any change on pins PCINT8-14: Off
// Interrupt on any change on pins PCINT16-23: Off
EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
EIMSK=(0<<INT1) | (0<<INT0);
PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);

// USART initialization
// USART disabled
UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
ADCSRB=(0<<ACME);
// Digital input buffer on AIN0: On
// Digital input buffer on AIN1: On
DIDR1=(0<<AIN0D) | (0<<AIN1D);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Graphic Display Controller initialization
// The SSD2119 connections are specified in the
// Project|Configure|C Compiler|Libraries|Graphic Display menu:
// DB0 - PORTD Bit 0
// DB1 - PORTD Bit 1
// DB2 - PORTD Bit 2
// DB3 - PORTD Bit 3
// DB4 - PORTD Bit 4
// DB5 - PORTD Bit 5
// DB6 - PORTD Bit 6
// DB7 - PORTD Bit 7
// DB8 - PORTC Bit 0
// DB9 - PORTC Bit 1
// DB10 - PORTC Bit 2
// DB11 - PORTC Bit 3
// DB12 - PORTC Bit 4
// DB13 - PORTC Bit 5
// DB14 - PORTC Bit 6
// DB15 - PORTB Bit 5
// D /C (RS) - PORTB Bit 0
// /CS - PORTB Bit 1
// /RD - PORTB Bit 2
// /WR - PORTB Bit 3
// /RST - PORTB Bit 4

// Specify the current font for displaying text
glcd_init_data.font=font5x7;
// No function is used for reading
// image data from external memory
glcd_init_data.readxmem=NULL;
// No function is used for writing
// image data to external memory
glcd_init_data.writexmem=NULL;
// Normal display, no horizontal reverse
glcd_init_data.reverse_x=SSD2119_REVX_NORM;
// Normal display, no vertical reverse
glcd_init_data.reverse_y=SSD2119_REVY_NORM;
// First output gate
glcd_init_data.first_out_gate=SSD2119_DEFAULT_FIRST_OUT_GATE;
// Pixel order: RGB
glcd_init_data.cl_bits_order=SSD2119_CL_BITS_RGB;
// Power control 1 BT0..BT2 step-up factor of the step-up circuit
glcd_init_data.stepup_factor=SSD2119_DEFAULT_STEPUP_FACTOR;
// Power control 1 DC0..DC3, DCT0..DCT3 step-up circuit cycle
glcd_init_data.stepup_cycle=SSD2119_DEFAULT_STEPUP_CYCLE;
// Power control 1 AP0..AP2 adjusts the amount of current
// from the constant current source in the
// internal op. amplifier circuit
glcd_init_data.crt_source=SSD2119_DEFAULT_CRT_SOURCE;
// Default value for VCIX2 voltage
glcd_init_data.vcix2=SSD2119_DEFAULT_VCIX2;
// Default value for VLCD63 voltage
glcd_init_data.vlcd63=SSD2119_DEFAULT_VLCD63;
// Default value for VcomL alternating drive voltage
glcd_init_data.vcoml=SSD2119_DEFAULT_VCOML;
// Default value for VcomH voltage
glcd_init_data.vcomh=SSD2119_DEFAULT_VCOMH;
// Frame frequency
glcd_init_data.frame_freq=SSD2119_DEFAULT_FRAME_FREQ;
// PKP00..PKP02 positive gamma micro adj.
glcd_init_data.pkp00=SSD2119_DEFAULT_PKP00;
// PKP10..PKP12 positive gamma micro adj.
glcd_init_data.pkp10=SSD2119_DEFAULT_PKP10;
// PKP20..PKP22 positive gamma micro adj.
glcd_init_data.pkp20=SSD2119_DEFAULT_PKP20;
// PKP30..PKP32 positive gamma micro adj.
glcd_init_data.pkp30=SSD2119_DEFAULT_PKP30;
// PKP40..PKP42 positive gamma micro adj.
glcd_init_data.pkp40=SSD2119_DEFAULT_PKP40;
// PKP50..PKP52 positive gamma micro adj.
glcd_init_data.pkp50=SSD2119_DEFAULT_PKP50;
// PRP00..PRP02 positive gamma gradient adj.
glcd_init_data.prp00=SSD2119_DEFAULT_PRP00;
// PRP10..PRP12 positive gamma gradient adj.
glcd_init_data.prp10=SSD2119_DEFAULT_PRP10;
// VRP00..VRP03 positive gamma amplification adj.
glcd_init_data.vrp00=SSD2119_DEFAULT_VRP00;
// VRP10..VRP14 positive gamma amplification adj.
glcd_init_data.vrp10=SSD2119_DEFAULT_VRP10;
// PKN00..PKN02 negative gamma micro adj.
glcd_init_data.pkn00=SSD2119_DEFAULT_PKN00;
// PKN10..PKN12 negative gamma micro adj.
glcd_init_data.pkn10=SSD2119_DEFAULT_PKN10;
// PKN20..PKN22 positive gamma micro adj.
glcd_init_data.pkn20=SSD2119_DEFAULT_PKN20;
// PKN30..PKN32 positive gamma micro adj.
glcd_init_data.pkn30=SSD2119_DEFAULT_PKN30;
// PKN40..PKN42 negative gamma micro adj.
glcd_init_data.pkn40=SSD2119_DEFAULT_PKN40;
// PKN50..PKN52 negative gamma micro adj.
glcd_init_data.pkn50=SSD2119_DEFAULT_PKN50;
// PRN00..PRN02 negative gamma gradient adj.
glcd_init_data.prn00=SSD2119_DEFAULT_PRN00;
// PRN10..PRN12 negative gamma gradient adj.
glcd_init_data.prn10=SSD2119_DEFAULT_PRN10;
// VRN00..VRN03 negative gamma amplification adj.
glcd_init_data.vrn00=SSD2119_DEFAULT_VRN00;
// VRN10..VRN14 negative gamma amplification adj.
glcd_init_data.vrn10=SSD2119_DEFAULT_VRN10;

glcd_init(&glcd_init_data);

while (1)
      {
      // Place your code here

      }
}
